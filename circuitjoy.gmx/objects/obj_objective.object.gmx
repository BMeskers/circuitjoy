<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_objective</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x + sprite_width / 2 - 64, y + sprite_height + 14 -36, obj_helpButton) 
instance_create(x + sprite_width / 2, y + sprite_height + 14 - 36, obj_checkButton) 

info = "Construct a circuit such that the light toggles whenever one of the switches is flipped.";
n = irandom_range(1,3);
//n=1;
obj1 = "Use " + string(n) + " gates.";
obj2 = "";

if (n &gt; 1){
    obj2 = "Use the AND-gate";
}

objective1 = false;
objective2 = false;
objective1Was = false;
objective2Was = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grid = instance_find(obj_puzzleGrid, 0);


// check if there are n gates used
m = 0;
for (i = 0; i &lt; grid.gridX; i++){
    for (j = 0; j &lt; grid.gridY; j++){
        if(!is_array(grid.grid[i,j])){
            if (object_is_ancestor(grid.grid[i,j].object_index ,obj_gate)){
                m++;
            }
        }
    }
}
if (n == m){
    objective1 = true;
}
else{
    objective1 = false;
}



/*
//start checking objective 2
if(string_length(obj2) &gt; 0){ 
    //check if there is an AND-gate used 
    is = 0;
    for (i = 0; i &lt; grid.gridX; i++){
        for (j = 0; j &lt; grid.gridY; j++){
            if(!is_array(grid.grid[i,j])){
                if ((grid.grid[i,j].object_index == obj_andGate)){
                    is = 1;
                }
            }
        }
    }
    if(is == 1){
        objective2 = true;
    }
    else{
        objective2 = false;
    }
}
*/
/*
//check if objective 1 gets points
if(objective1){
    if(objective1Was == false){
        global.points += 20;
        objective1Was = true;
        objective1 = false;
    }
}
else {
    if(objective1Was){
        global.points -=20;
        objective1Was = false;
    }
}
//check if objective 2 gets points
if(objective2){
    if(objective2Was == false){
        global.points += 20;
        objective2Was = true;
        objective2 = false;
    }
}
else {
    if(objective2Was){
        global.points -=20;
        objective2Was = false;
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
text = info + "##" + obj1
text = info;
x2 = x +20;
y2 = y +20;

infoHeight = string_height(info);
textHeight = string_height(text);
obj1Width = string_width(obj1);
obj1Height = string_height(obj1);
width = obj1Width;

//draw objective text
draw_set_font(font0);
draw_set_colour($00AB34);
draw_text_ext(x2, y2, string(text), obj1Height, sprite_width-40);
height = textHeight;

//check for first objective
//if ( objective1){
//    draw_sprite(spr_objectiveClear,0,x2 + width,y2 + height);
//}

//check for second objective
//if(string_length(obj2) &gt; 0){
//    width = string_width(obj2);
//    temp = "#" + obj2;
//    height = height + string_height(obj2);
//    draw_text_ext_colour(x2, y2 + height, string(obj2), height, sprite_width, c_lime, c_lime, c_green, c_green, 1); 
//
//    if(objective2){
//        draw_sprite(spr_objectiveClear,0,x2 + width,y2 + height);
//    }
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
