<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_checkButton</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>finished = false;
passed = false;
n = 0;
inputs = null;
outputs = null;
isWrong = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inputID = 0;
outputID = 0;

alarmTime = 20;

//get the id of the current input
for (i = 0; i &lt; array_length_1d(inputs); i++){
    inputID += inputs[i].output * power(2, i);
}

//get the desired answer
answerID = answ.answers[global.level, inputID];

//compare desired output to actual output
for (i = 0; i &lt; array_length_1d(outputs); i ++){
    currentExpectedAnswer = answerID div power(3, i);
    answerID -= currentExpectedAnswer * 3;
    
    if (currentExpectedAnswer == 2 or currentExpectedAnswer == outputs[i].input1){
        //answer still correct
    }else {
        //wrong answer
        alarmTime += 20;
        instance_create(0, 0, obj_wrongBorder);
        isWrong = true;
    }
}

//check if at end of inputs, else iterate to next one.
if (inputID &lt; power(2, array_length_1d(inputs)) - 1){
    //iterate to next possible input
    for (i = 0; i &lt; array_length_1d(inputs); i++){
        currentInputState = (inputID mod power(2, i + 1)) div power(2, i);
        if (currentInputState == 0){
            inputs[i].output = true;
            break;
        }else {
            inputs[i].output = false;
        }
    }
    alarm[0] = alarmTime;
}else {
    global.checking = false;
    for (i = 0; i &lt; array_length_1d(inputs); i++){
        inputs[i].output = false;
    }
    // if there was an error, add the error on number of times wrong
    if(isWrong){
        global.nrWrong += 1;
        isWrong = false;
    }
    //if there was no error, strt the finalScore 
    else{
        instance_create(0, 0, obj_finalScore);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.checking){
    sprite_index = spr_checkButtonPressed;
}else {
    sprite_index = spr_checkButton;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.checking){
    global.checking = true;
    grid = instance_find(obj_puzzleGrid, 0);
    n = 0;
    for (i = 0; i &lt; grid.gridX; i++){
        for (j = 0; j &lt; grid.gridY; j++){
            if(!is_array(grid.grid[i,j])){
                if (object_is_ancestor(grid.grid[i,j].object_index ,obj_gate)){
                    n++;
                }
            }
        }
    }
    
    inputs = null;
    outputs = null;
    answ = instance_find(obj_answers,0);
    
    for (i = 0; i &lt; instance_number(obj_input); i ++){
        inputs[i] = instance_find(obj_input, i);
        inputs[i].output = false;
    }
    for (i = 0; i &lt; instance_number(obj_output); i ++){
        outputs[i] = instance_find(obj_output, i);
    }
    
    alarm[0] = 20;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
